---
- hosts: dbs
  become: true
 
  vars:
    sites: [ 'site1.com', 'site2.com' ] 

  tasks:
   
  
  - name: Nginx installed
    apt:
      name: nginx
      state: latest
      update_cache: true
    tags: install_nginx

  - name: Version nginx
    command: nginx -v
    register: version_nginx
    tags: install_nginx

  - name: Version nginx
    ansible.builtin.debug:
      msg: "{{ version_nginx.stderr }}"
    tags: install_nginx

  - name: Check if folder exists sites-available
    ansible.builtin.stat: 
     path: /etc/nginx/sites-available/
    register: available 

  - name: Check if folder exists sites-enabled
    ansible.builtin.stat:
     path: /etc/nginx/sites-enabled/
    register: enabled

  - name: Create folder for index.html
    file:
      path: /var/www/{{item}}/html/
      owner: root
      state: directory
      mode: 0755
    loop:
      "{{sites}}"

  - name: Config file
    template:
      src: ./templates/nginx.conf.j2
      dest: /etc/nginx/sites-available/{{ item }}.conf
    loop:
      "{{sites}}"

  - name: Create index.html
    template:       
      src: ./templates/index.html.j2
      dest: /var/www/{{ item }}/html/index.html
    loop: "{{sites}}"

  - name: Add to 'enabled' sites
    ansible.builtin.shell: |
        ln -s /etc/nginx/sites-available/{{ item }}.conf  /etc/nginx/sites-enabled/
    loop: "{{sites}}"
    failed_when: false     

  - name: Adding hosts to the hosts file
    ansible.builtin.shell:
      grep -q "{{ item }}" /etc/hosts || echo "127.0.0.1 {{ item }}" >> /etc/hosts;
    loop: "{{sites}}"

  - name: Restart nginx
    service:
      name: nginx
      state: restarted    

  - name: check connection
    uri:
      url: "http://{{ item }}"
      return_content: yes
    register: code_200
    failed_when: "'Hi' not in code_200.content"
    loop:
        "{{sites}}"

  - name: Check info
    debug:
        msg: "{{ code_200.msg }}"    
