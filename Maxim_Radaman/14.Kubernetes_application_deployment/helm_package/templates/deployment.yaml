---
apiVersion: v1
kind: Namespace
metadata:
  name: ci-cd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: ci-cd
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
        - name: jenkins
          image: {{ .Values.image.repository }}
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: "-Djenkins.install.runSetupWizard=false"
            - name: PASS
              valueFrom:
                secretKeyRef:
                  name: jenkins-secret
                  key: password
            - name: CASC_JENKINS_CONFIG
              value: {{ .Values.yamljenkinspath }}
          ports:
            - name: http-port
              containerPort: {{ index .Values "containerPort" "http-port" }}
            - name: jnlp-port
              containerPort: {{ index .Values "containerPort" "jnlp-port" }}
          securityContext:
            runAsUser: 0
          resources:
            requests:
              cpu: {{ index .Values "requests" "cpu" }}
              memory: {{ index .Values "requests" "memory" }}
            limits:
              cpu: {{ index .Values "limits" "cpu" }}
              memory: {{ index .Values "limits" "memory" }}
          volumeMounts:
            - name: docker-sock
              mountPath: {{ .Values.hostpath }}
            - name: jenkins-auth-config
              mountPath: {{ .Values.groovypath }}
              subPath: basic-security.groovy
            - name: jenkins-config-yaml
              mountPath: {{ .Values.yamljenkinspath }}
              subPath: jenkins.yaml
            - name: jenkins-config
              mountPath: {{ .Values.jenkinspath }}
      volumes:
        - name: docker-sock
          hostPath:
            path: {{ .Values.hostpath }}
        - name: jenkins-auth-config
          configMap:
            name: basic-security
        - name: jenkins-config-yaml
          configMap:
            name: jenkins-config
        - name: jenkins-config
          nfs:
            server: {{ .Values.servernfs }}
            path: {{ .Values.path }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: basic-security
  namespace: ci-cd
data:
  basic-security.groovy: |
    #!groovy
    import jenkins.model.*
    import hudson.security.*
    def instance = Jenkins.getInstance()
    println "--> creating local user 'admin'"
    def password = System.getenv("PASS")
    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    hudsonRealm.createAccount('admin',"password")
    instance.setSecurityRealm(hudsonRealm)
    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    strategy.setAllowAnonymousRead(true)
    instance.setAuthorizationStrategy(strategy)
    instance.save()
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-config
  namespace: ci-cd
data:
  jenkins.yaml: |
        jenkins:
          numExecutors: 2
          clouds:
          - kubernetes:
              containerCapStr: "10"
              maxRequestsPerHostStr: "32"
              jenkinsUrl: "http://jenkins:8080"
              name: "kubernetes"
              namespace: "ci-cd"
              skipTlsVerify: true
        credentials:
          system:
            domainCredentials:
            - credentials:
              - usernamePassword:
                  description: "Githubuser"
                  id: "some_randome"
                  password: "password"
                  scope: GLOBAL
                  username: "git_hub_user"
        unclassified:
          location:
            adminAddress: {{ .Values.email }}
            url: {{ index .Values "url" "host1url" }}
          shell:
            shell: "/bin/bash"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-jenkins
  namespace: ci-cd
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/server-alias: {{ index .Values "hosturl" "host2" }}
spec:
  rules:
    - host: {{ index .Values "hosturl" "host1" }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: jenkins
                port:
                  number: {{ index .Values "containerPort" "http-port" }}
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: ci-cd
spec:
#  type: ClusterIP
  ports:
    - name: master
      port: {{ index .Values "containerPort" "http-port" }}
      targetPort: {{ index .Values "containerPort" "http-port" }}
    - name: slave
      port: {{ index .Values "containerPort" "jnlp-port" }}
      targetPort: {{ index .Values "containerPort" "jnlp-port" }}
  selector:
    app: jenkins
